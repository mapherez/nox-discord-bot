import { ChatInputCommandInteraction } from 'discord.js';

async function yourcommand(interaction: ChatInputCommandInteraction): Promise<void> {
  // Your command logic here
  // This function will be automatically discovered and added to /nox subcommands

  // Example: Simple response
  await interaction.reply('Hello from your new command!');

  // For commands with parameters, access them like:
  // const param = interaction.options.getString('parameter_name');

  // For async operations that might take time:
  // await interaction.deferReply(); // Call this FIRST if operation takes >3 seconds
  // ... do async work ...
  // await interaction.editReply('Response after async work');
}

export { yourcommand };

// =============================================================================
// SUBCOMMAND TEMPLATE
// =============================================================================
// To create a new subcommand:
// 1. Copy this file and rename it to yourcommand.ts
// 2. Rename the function from 'yourcommand' to your actual command name
// 3. Update the export statement to match your function name
// 4. Implement your command logic
// 5. If your command needs parameters, update the nox.ts file to add them
// 6. Restart the bot - the subcommand will be automatically discovered!
//
// Examples:
// - Simple commands: ping, help, guildid
// - Commands with string params: weather [location], definition [word]
// - Commands with user params: userinfo [@user]
// - Commands with complex logic: definition (scrapes web, processes images)
//
// Remember:
// - All subcommands are accessed via /nox subcommand_name
// - Function name must match filename (without .ts)
// - Use interaction.reply() for initial response
// - Use interaction.followUp() for additional messages
// - Use interaction.deferReply() before async operations >3 seconds
// =============================================================================